=List of Datatypes=
Preliminary list as grabbed from the console:
&lt;TABLE background-color=#CCCCCC&gt;&lt;TR&gt;&lt;TD VALIGN=TOP&gt;
{| cellpadding=1 cellspacing=1
|-
|'''[http://rebol.com/r3/docs/datatypes/action.html action!]'''
|datatype-relative native function (polymorphic)
|-
|'''[http://rebol.com/r3/docs/datatypes/binary.html binary!]'''    
|string series of bytes
|-
|'''bitset!'''
|set of bit flags
|-
|'''block!'''
|series of values
|-
|'''char!'''
|8bit and 16bit character
|-
|style=&quot;background-color: #CCCCCC&quot; |
|style=&quot;background-color: #CCCCCC&quot; |
|-
|'''closure!'''
|function with persistent local values (indefinite)
|-
|'''datatype!'''
|datatype value
|-
|'''date!'''
|day, month, year, time of day, and timezone
|-
|'''decimal!'''
|64bit floating point number (IEEE standard)
|-
|'''email!'''
|email address
|-
|style=&quot;background-color: #CCCCCC&quot; |
|style=&quot;background-color: #CCCCCC&quot; |
|-
|'''end!'''
|internal marker for end of block
|-
|'''error!'''
|error value
|-
|'''event!'''
|user interface event (efficiently sized)
|-
|'''file!'''
|file name or path
|-
|'''frame!'''
|internal context frame
|-
|style=&quot;background-color: #CCCCCC&quot; |
|style=&quot;background-color: #CCCCCC&quot; |
|-
|'''function!'''
|interpreted function (user-defined or mezzanine)
|-
|'''get-path!'''
|the value of a path
|-
|'''get-word!'''
|the value of a word (variable)
|-
|'''gob!'''
|graphical object
|-
|'''handle!'''
|arbitrary internal object or value
|-
|style=&quot;background-color: #CCCCCC&quot; |
|style=&quot;background-color: #CCCCCC&quot; |
|-
|'''image!'''
|RGB image with alpha channel
|-
|'''integer!'''
|64 bit integer
|-
|'''issue!'''
|identifying string or script marker
|-
|'''library!'''
|external library reference
|-
|'''lit-path!'''
|literal path value
|-
|style=&quot;background-color: #CCCCCC&quot; |
|style=&quot;background-color: #CCCCCC&quot; |
|-
|'''lit-word!'''
|literal word value
|-
|'''logic!'''
|boolean true or false
|-
|'''map!'''
|hashed name-value pairs
|-
|'''module!'''
|loadable context of code and data
|}
&lt;/TD&gt;&lt;TD VALIGN=TOP&gt;
{|cellpadding=1 cellspacing=1
|-
|'''money!'''
|arbitrary precision decimal numbers (denominations)
|-
|'''native!'''
|direct CPU evaluated function
|-
|'''none!'''
|no value represented
|-
|'''object!'''
|context of names with values
|-
|'''op!'''
|infix operator (special evaluation exception)
|-
|style=&quot;background-color: #CCCCCC&quot; |
|style=&quot;background-color: #CCCCCC&quot; |
|-
|'''pair!'''
|two dimensional point or size
|-
|'''paren!'''
|automatically evaluating block
|-
|'''path!'''
|refinement path for functions, objects, files, etc.
|-
|'''percent!'''
|special form of decimals (used mainly for layout)
|-
|'''port!'''
|external series, an I/O channel
|-
|style=&quot;background-color: #CCCCCC&quot; |
|style=&quot;background-color: #CCCCCC&quot; |
|-
|'''rebcode!'''
|virtual machine function
|-
|'''refinement!'''
|variation of meaning or location
|-
|'''routine!'''
|external library function
|-
|'''set-path!'''
|definition of a path's value
|-
|'''set-word!'''
|definition of a word's value
|-
|style=&quot;background-color: #CCCCCC&quot; |
|style=&quot;background-color: #CCCCCC&quot; |
|-
|'''string!'''
|string series of characters
|-
|'''struct!'''
|native structure definition
|-
|'''tag!'''
|markup string (HTML or XML)
|-
|'''task!'''
|evaluation environment
|-
|'''time!'''
|time of day or duration
|-
|style=&quot;background-color: #CCCCCC&quot; |
|style=&quot;background-color: #CCCCCC&quot; |
|-
|style=&quot;valign=top&quot;|'''tuple!'''
|integers sequence (colors, versions, IP addresses)
|-
|'''typeset!'''
|set of datatypes
|-
|'''unicode!'''
|string of unicoded characters
|-
|'''unset!'''
|no value returned or set
|-
|'''url!'''
|uniform resource locator or identifier
|-
|style=&quot;background-color: #CCCCCC&quot; |
|style=&quot;background-color: #CCCCCC&quot; |
|-
|'''utype!'''
|user defined datatype
|-
|'''vector!'''
|multideminsional directly mapped arrays (of same datatype)
|-
|'''word!'''
|word (symbol or variable)
|}
&lt;/TD&gt;&lt;/TR&gt;&lt;/TABLE&gt;

=Arranged List of Datatypes=
All datatypes except end! are arranged in typesets.

==end!==


==any-type!==

'''any-type! is  typeset of all of these datatypes:'''
&lt;TABLE CELLPADING=2 CELLSPACING=1&gt;&lt;TR&gt;&lt;TD WIDTH=11%&gt;
unset!&lt;BR&gt; none!&lt;BR&gt; logic!&lt;BR&gt; integer!&lt;BR&gt;decimal!&lt;BR&gt;percent!
&lt;/TD&gt;&lt;TD WIDTH=11%&gt;
money!&lt;BR&gt;char!&lt;BR&gt; pair!&lt;BR&gt;tuple!&lt;BR&gt;time!&lt;BR&gt;date!
&lt;/TD&gt;&lt;TD WIDTH=11%&gt;
string!&lt;BR&gt; binary!&lt;BR&gt; file!&lt;BR&gt;email!&lt;BR&gt;url!&lt;BR&gt;tag!
&lt;/TD&gt;&lt;TD WIDTH=11%&gt;
issue!&lt;BR&gt;bitset!&lt;BR&gt; unicode!&lt;BR&gt;vector!&lt;BR&gt;image!&lt;BR&gt;block!
&lt;/TD&gt;&lt;TD WIDTH=11%&gt;
paren!&lt;BR&gt; map!&lt;BR&gt; path!&lt;BR&gt; set-path!&lt;BR&gt;get-path!&lt;BR&gt;lit-path!
&lt;/TD&gt;&lt;TD WIDTH=11%&gt;
datatype!&lt;BR&gt; typeset!&lt;BR&gt;word!&lt;BR&gt;set-word!&lt;BR&gt;get-word!&lt;BR&gt;lit-word!
&lt;/TD&gt;&lt;TD WIDTH=11%&gt;
refinement!&lt;BR&gt; native!&lt;BR&gt;action!&lt;BR&gt;routine!&lt;BR&gt;rebcode!&lt;BR&gt;op!
&lt;/TD&gt;&lt;TD WIDTH=11%&gt;
closure!&lt;BR&gt; function!&lt;BR&gt; frame!&lt;BR&gt;object!&lt;BR&gt;module!&lt;BR&gt;error!
&lt;/TD&gt;&lt;TD WIDTH=11%&gt;
task!&lt;BR&gt;port!&lt;BR&gt;gob!&lt;BR&gt;event!&lt;BR&gt;handle!&lt;BR&gt;struct!
&lt;/TD&gt;&lt;TD WIDTH=11% VALIGN=TOP&gt;
library!&lt;BR&gt; utype!
&lt;/TD&gt;&lt;/TR&gt;&lt;/TABLE&gt;
===unset!===

No value returned or set. The functions GET and SET have special treatment of unset! values with their /any refinements:

 set/any 'a #[unset!]
 get/any 'a

If functions should be allowed to handle unset! arguments, it should be specified with either unset! or any-type!:

 f: func [value [unset!]] [ ... ]
 f: func [value [any-type!]] [ ... ]

===none!===

{|border=&quot;1&quot; cellpadding=&quot;5&quot; cellspacing=&quot;0&quot;
|-
|'''value'''
|#[none]
|}

===logic!===

{|border=&quot;1&quot; cellpadding=&quot;5&quot; cellspacing=&quot;0&quot;
|-
|'''value'''
|#[true]
|-
|'''value'''
|#[false]
|}

 &gt;&gt; to integer! true
 == 1
 &gt;&gt; to integer! false
 == 0

{|border=&quot;1&quot; cellpadding=&quot;5&quot; cellspacing=&quot;0&quot;
|+ Predefined logics
! Word || Value
|-
|false || #[false]
|-
|no || #[false]
|-
|off || #[false]
|-
|true || #[true]
|-
|yes || #[true]
|-
|on || #[true]
|}

===scalar!===

A typeset of:

integer! decimal! percent! money! char! pair! tuple! time!


====number!====

'''A typeset of:

=====integer!=====

=====decimal!=====

=====percent!=====

{|border=&quot;1&quot; cellpadding=&quot;5&quot; cellspacing=&quot;0&quot;
! bgcolor=silver|  
! bgcolor=silver|integer! 
! bgcolor=silver|decimal!
!bgcolor=silver |percent!
|-
|'''Minimum'''
|align=&quot;right&quot;| -9'223'372'036'854'775'808
|align=&quot;right&quot;| -1.797'693'134'862'315'7E+308
|align=&quot;right&quot;| -1.797'693'134'862'315'7E+310%
|-
|'''Maximum'''
|align=right|9'223'372'036'854'775'807
|align=right|1.797'693'134'862'315'7E+308
|align=&quot;right&quot;|1.797'693'134'862'315'7E+310%
|-
|'''Minimal positive normalized'''
|
|align=&quot;right&quot;| 2.225'073'858'507'201'4E-308
|align=&quot;right&quot;| 2.225'073'858'507'201'4E-306%
|-
|'''Maximal positive denormalized'''
|
|align=&quot;right&quot;| 2.225'073'858'507'200'9E-308
|align=&quot;right&quot;| 2.225'073'858'507'200'9E-306%
|-
|'''Minimal positive denormalized'''
|
|align=&quot;right&quot;| 4.940'656'458'412'465'4E-324
|align=&quot;right&quot;| 4.940'656'458'412'465'4E-322%
|-
|'''Maximal negative normalized'''
|
|align=&quot;right&quot;| -2.225'073'858'507'201'4E-308
|align=&quot;right&quot;| -2.225'073'858'507'201'4E-306%
|-
|'''Minimal negative denormalized'''
|
|align=&quot;right&quot;| -2.225'073'858'507'200'9E-308
|align=&quot;right&quot;| -2.225'073'858'507'200'9E-306%
|-
|'''Maximal negative denormalized'''
|
|align=&quot;right&quot;| -4.940'656'458'412'465'4E-324
|align=&quot;right&quot;| -4.940'656'458'412'465'4E-322%
|}
 &gt;&gt; min-integer: to integer! #{8000 0000 0000 0000}
 == -9223372036854775808
 &gt;&gt; max-integer: to integer! #{7FFF FFFF FFFF FFFF}
 == 9223372036854775807

====money!====

{|border=&quot;1&quot; cellpadding=&quot;5&quot; cellspacing=&quot;0&quot;
|-
! bgcolor=silver | 
! bgcolor=silver | money!
|-
|'''Minimum'''
|align=&quot;right&quot;| -$99'999'999'999'999'999'999'999'999e127
|-
|'''Maximum'''
|align=&quot;right&quot;| $99'999'999'999'999'999'999'999'999e127
|-
|'''Minimal positive'''
| $1e-128
|-
|'''Maximal negative'''
| -$1e-128
|}

====char!====

{|border=&quot;1&quot; cellpadding=&quot;5&quot; cellspacing=&quot;0&quot;
|-
|'''Minimum'''
|#&quot;^(00)&quot;
|-
|'''Maximum'''
|#&quot;^(FFFF)&quot;
|}

 &gt;&gt; min-char: to char! 0
 == #&quot;^@&quot;
 &gt;&gt; max-char: to char! 65535
 == #&quot;?&quot;

====pair!====

{|border=&quot;1&quot; cellpadding=&quot;5&quot; cellspacing=&quot;0&quot;
|-
|'''Minimum'''
|align=&quot;center&quot;| -2147483648x-2147483648
|-
|'''Maximum'''
|align=&quot;center&quot;| 2147483647x2147483647
|}

 &gt;&gt; min-pair: as-pair to integer! #{8000 0000} to integer! #{8000 0000}
 == -2147483648x-2147483648
 &gt;&gt; max-pair: as-pair to integer! #{7FFF FFFF} to integer! #{7FFF FFFF}
 == 2147483647x2147483647


====tuple!====

{|border=&quot;1&quot; cellpadding=&quot;5&quot; cellspacing=&quot;0&quot;
!bgcolor=silver |
!bgcolor=silver | tuple!
|-
|'''Minimum'''
|0.0.0 ...
|-
|'''Maximum'''
|255.255.255 ...
|}

====time!====

{|border=&quot;1&quot; cellpadding=&quot;5&quot; cellspacing=&quot;0&quot;
|-
|'''Minimum'''
|align=&quot;right&quot;| -596523:14:07.999999999
|-
|'''Maximum'''
|align=&quot;right&quot;| 596523:14:07.999999999
|}

 &gt;&gt; min-time: (to time! to integer! #{8000 0001}) - 0.999999999
 == -596523:14:07.999999999
 &gt;&gt; max-time: (to time! to integer! #{7FFF FFFF}) + 0.999999999
 == 596523:14:07.999999999


===date!===

{|border=&quot;1&quot; cellpadding=&quot;5&quot; cellspacing=&quot;0&quot;
|-
|'''Minimum'''
|1-Jan-0000
|-
|'''Maximum'''
|31-Dec-16383
|}


===[[Mathematical model of REBOL series | series!]]===

A typeset of:

string! binary! file! email! url! tag! issue! unicode! vector! block! paren! path! set-path! get-path! lit-path!


====any-string!====

A typeset of:

string! binary! file! email! url! tag! issue!

=====string!=====

=====binary!=====

=====file!=====

=====email!=====

=====url!=====

=====tag!=====

=====issue!=====

====unicode!====

====vector!====

====any-block!====

A typeset of:

block! paren! path! set-path! get-path! lit-path!

=====block!=====

=====paren!=====

=====path!=====

=====set-path!=====

=====get-path!=====

=====lit-path!=====

===bitset!===

===image!===

    img: make image! 320x240
    img/size  ;== 320x240
    img/rgb   ;== #{00000000...
    img/alpha ;== #{00000000...

Note: if you want to make image transparent use:
    
    img/alpha: 255

(using change and other series manipulations on alpha channel will not work!)


To draw into image you can use something like:

    draw img [pen 255.0.0 line 0x0 320x240]
    view layout [image img]

You can also create image using binary data directly, like:

    img: make image! reduce [4x1 as-binary &quot;Hello world!&quot;]
    probe as-string img/rgb ;== &quot;Hello world!&quot;
    view layout [image img 200x80]


[[image:hello-world-encoded-as-an-image.png]]

If you have raw RGBA binary data, you can create image! from it using:
   img: to image! #{FFFFFFC0000000C0}
   view layout [image img 200x100]

[[Image:To-image-example-result.png]]

Another note:
In Rebol2 you have to use:
    view layout [image img]
... but in Rebol3 (alpha version) you can use just:
    view [image img]
... but it would be nice to have chance to do just:
    view img
... which is easy to add and it's already submited as a wish.

===map!===

===datatype!===

===typeset!===


===any-word!===

A typeset of:

word! set-word! get-word! lit-word! refinement!


====word!====

====set-word!====

====get-word!====

====lit-word!====

====refinement!====


===any-function!===

A typeset of:

native! action! routine! rebcode! op! closure! function!


====native!====

====action!====

====routine!====

====rebcode!====

====op!====

====closure!====

====function!====

===frame!===

===any-object!===

A typeset of:

====object!====

====module!====

====error!====

====task!====

====port!====

===gob!===

===event!===

===handle!===

===struct!===

===library!===

===utype!===