<div style="background:#CEE0F2; text-align:center; border-bottom:1px
#A3B1BF solid;">


The REBOL User Community Glossary
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Add your own definitions of existing topic, or add new topics.<br> The
objective is to paint a picture of many colours regarding the
understanding of some crucial REBOL concepts. </div>

[cols="",]
|=========================
|__TOC__
|=========================

<div style="background:#F5FAFF; padding:1.2em;"> <!-- Add a topic, or
add to a topic. Signed if you'd like, or not, your choice -->


words
+++++

<hr>


Bluey

A note about words. REBOL uses multiple phases during interpretation of
scripts. Words are only symbols until evaluated. This is normally of
little concern, but there are times when this distinction needs to be
understood.

For example; REBOL includes an important *datatype!* called *none!*. The
value *none* is the only value with this datatype. Evaluation of words
occurs in very specific and clear circumstances, and normally in a
script, the symbol _none_ will be evaluated to the value *none*, without
the developer thinking about it.

Within a *block!* this may not be the case. Words inside blocks, like
all other words, remain as symbols until evaluated. The code

`a: none`

when evaluated in a script, assigns the value *none* to the word *a* as
the symbol _none_ is evaluated to the value *none*. The code

`b: [none]`

assigns the *block!* containing the *symbol* _none_ to the word *b*.

So the code

`c: first b`

assigns the symbol _none_ to the word *c*. The values set in the words
*a* and *c* are different.

*a* has the *_value_* *none* and *c* has the *_symbol_* _none_.

All values have a _lexical form_, the text #[none] is loaded by REBOL as
the *_value_* *none*. Furthering the above example;

`c: first [#[none]]`

assigns the *_value_* *none* to the word *c*.

User:BTiffin[Bluey] 16:55, 25 August 2007 (EDT) <hr>


Bluey correction 1

<span id="bluey-update-1"></span> Ok, so I've had an incorrect view of
REBOL pretty much since day 1.

REBOL is not _word_ based, it is _value_ based. Source text is treated
as VALUES; and these values have a *type* and *content*, or the value of
the value so to speak. So the source text that looks like

`1`

is a _value_ with a type of *integer!* and a content of *1*. The source
text that looks like

`a: 1`

is two values. The first is *a:*, and this value is of type *set-word!*
and the content is *a* <small>or is it *a:*?</small>. Now this leads to
the content of the set-word! *a:* becoming another value of type
*word!*, with a _spelling_ of *a*. This *word!* value, refers to some
value slots; one for spelling and one for _context_. The context is used
by REBOL to keeping track of the various word spellings, much like a
dictionary. In this *a: 1* case, the value with a type of *word!* will
refer to a value of type *integer!* with a content of *1*.

I'm leaving the previous definition in the document, but I think it can
safely be ignored as wrong minded. The concepts mentioned for *none* as
still worthy, but needs to be defined in terms of values as described in
this update. My view may change still. REBOL is deep and understanding
comes in small steps somedays and leaps and bounds on others.

User:BTiffin[Bluey] 03:51, 27 August 2007 (EDT) <hr>


Ladislav

My (Ladislav) take:

REBOL source text is converted (by the *load* function) to a REBOL block
containing REBOL _values_; and these values have a _type_ and _other
contents_. So the source text that looks like

`1`

is converted by *load* to a block containing one _value_ with a type of
*integer!* and a numeric value of <tt>1</tt>. The source text that looks
like

`a: 1`

is converted to a block containing two values. The first one is
<tt>a:</tt>; this value is of the *set-word!* type and its other
contents are its spelling <tt>"a"</tt> and its binding to the global
context. After the block is interpreted by the *do* function, the word
*_a_* is caused to refer to the integer value <tt>1</tt>, which actually
means, that the "global context slot" corresponding to the word *_a_* is
caused to refer to the integer.

<!-- Ending div for all the entries --> </div>
